#version 460 core

#define threadsInThreadGroup 0
#define threadGroupsInWorkGroup 0
#define elementsPerGroup 0
#define threadGroupsTotal 1
#define sharedCountersSize 1024

layout(local_size_x = sharedCountersSize) in;
layout(std430) buffer;


layout(binding = 1) buffer cells
{
	uint cellIds[];
};
layout(binding = 3) buffer counters
{
	uint globalCounters[];
};
layout(binding = 4) buffer total
{
	uint totalSumms[];
};

shared uint sharedCounters[sharedCountersSize];
shared uint totalSummsShared[4];


void presumm(uint thid, uint n)
{
	uint offset = 1;

	for (uint d = n>>1; d > 0; d >>= 1)
	{ 
		barrier();
		if (thid < d)
		{
			// B
			uint ai = offset*(2*thid+1)-1;
			uint bi = offset*(2*thid+2)-1;
			// B
			sharedCounters[bi] += sharedCounters[ai];
		}
		offset *= 2;
	}

	// C
	if (thid == 0) // clear the last element
	{
		sharedCounters[n - 1] = 0;
	}
	// C

	for (uint d = 1; d < n; d *= 2) // traverse down tree & build scan
	{
		offset >>= 1;
		barrier();

		if (thid < d)
		{
			// D
			uint ai = offset*(2*thid+1)-1;
			uint bi = offset*(2*thid+2)-1; 
			// D
			uint t = sharedCounters[ai];
			sharedCounters[ai] = sharedCounters[bi];
			sharedCounters[bi] += t;
		}
	}
}

void main()
{
	const uint thid = gl_LocalInvocationID.x;

	for (uint i = 0; i < 4; i++)
	{
		uint radix = gl_WorkGroupID.x * 4 + i;
		uint globalCounterIndex = thid * 256 + radix;
		uint globalCounter = globalCounters[globalCounterIndex];

		if (thid < threadGroupsTotal)
			sharedCounters[thid] = globalCounter;
		else
			sharedCounters[thid] = 0;

		presumm(thid, sharedCountersSize);

		barrier();

		if (thid == threadGroupsTotal - 1)
		{
			totalSummsShared[i] = globalCounter + sharedCounters[thid];
		}

		if (thid < threadGroupsTotal)
			globalCounters[globalCounterIndex] = sharedCounters[thid];
	}

	barrier();

	if (thid < 4)
	{
		totalSumms[gl_WorkGroupID.x * 4 + thid] = totalSummsShared[thid];
	}
}
