#version 460 core

#define cellIdsLength 0
#define cellsPerThread 10
#define threadsInBlock 1024


layout(local_size_x = 1024) in;
layout(std430) buffer;


layout(location = 0) uniform vec2 windowSize;
layout(location = 1) uniform float particleSize;
layout(location = 2) uniform uint cellSize;
layout(location = 3) uniform float forceScale;

struct Particle
{
	vec2 Pos;
	vec2 PosPrev;
	vec2 Acc;
	float Pressure;
	float Unused;
};
struct collCell
{
	uint index;
	uint phantomAndHomeCellsCountPacked;
};

layout(binding = 0) buffer SSBO
{
	Particle particles[];
};
layout(binding = 1) buffer cells1
{
	uint cellIds[];
};
layout(binding = 2) buffer objects1
{
	uint objectIds[];
};
layout(binding = 9) buffer tetete
{
	float test[];
};
layout(binding = 10) buffer collisionList
{
	collCell collisionCells2[];
};


void main()
{
	const uint thid = gl_GlobalInvocationID.x;
	const uint startIndex = thid * cellsPerThread;

	const uint gridWidth = uint(windowSize.x / cellSize) + 2;

	collCell collisionCells[84];
	uint collisionCellsFound[4] = uint[4](0, 0, 0, 0);
	bool isFirstTransition = thid != 0;
	bool isTransitionFound = false;

	uint collisionCellIndex = startIndex;
	uint prevCellId = cellIds[startIndex];
	uint homeOrPhantomCell = objectIds[startIndex] >> 31;
	uint pCount = 1;
	pCount -= homeOrPhantomCell;
	uint hCount = homeOrPhantomCell;

	uint i;
	uint currCellId;
	for (i = 1;
			(i <= cellsPerThread + 1 || !isTransitionFound) // scanning until the transition is found after the end of assigned to thread part of cellIds
			&& startIndex + i < cellIdsLength + 1; // scanning past the end of cellIds to catch a collision cell at the end of cellIds
		i++)
	{
		isTransitionFound = false;
		currCellId = cellIds[startIndex + i];

		if (currCellId != prevCellId)
		{
			if (!isFirstTransition) // thread number 0 is the only one which will enter here on the first iteration, next iterations all threads are entering
			{
				if (hCount > 0 && pCount > 0 || hCount > 1)
				{
					uint cellType = ((prevCellId % gridWidth) % 2) + ((prevCellId / gridWidth) % 2) * 2;
					collisionCells[cellType * 21 + collisionCellsFound[cellType]] = collCell(collisionCellIndex, hCount << 16 | pCount);
					collisionCellsFound[cellType]++;
				}
			}
			isFirstTransition = false;

			collisionCellIndex = startIndex + i;
			prevCellId = currCellId;
			pCount = 0;
			hCount = 0;

			isTransitionFound = true;
		}

		homeOrPhantomCell = objectIds[startIndex + i] >> 31;
		pCount++;
		pCount -= homeOrPhantomCell;
		hCount += homeOrPhantomCell;
	}

	for (i = 0; i < 4; i++)
	{
		uint collCellFound = collisionCellsFound[i];

		for (uint j = 0; j < collCellFound; j++)
		{
			collCell collisionCell = collisionCells[i * 21 + j];
			collisionCellIndex = collisionCell.index;
			hCount = collisionCell.phantomAndHomeCellsCountPacked >> 16;
			pCount = collisionCell.phantomAndHomeCellsCountPacked & 65535;
			for (uint h = 0; h < hCount; h++)
			{
				Particle particleA = particles[objectIds[collisionCellIndex + h]];
				for (uint c = h + 1; c < hCount + pCount; c++)
				{
					Particle particleB = particles[objectIds[collisionCellIndex + c]];
					const vec2 posDiff = particleA.Pos - particleB.Pos + 0.0000000000001; // for case when two particles have exaclty the same posision
					const float distSquared = dot(posDiff, posDiff);

					if (distSquared < particleSize * particleSize)
					{
						const float dist = sqrt(distSquared);
						const vec2 norm = posDiff / dist;
						const float covered = particleSize - dist;

//						particleA.PosPrev = particleA.Pos;
//						particleB.PosPrev = particleB.Pos;

						vec2 move = norm * covered * 0.5 * forceScale;
						particleA.Pos += move;
						particleB.Pos -= move;

						particleA.Pressure += covered / particleSize * 0.5;
						particleB.Pressure += covered / particleSize * 0.5;

						particles[objectIds[collisionCellIndex + h]] = particleA;
						particles[objectIds[collisionCellIndex + c]] = particleB;
					}
				}
			}
		}

		barrier();
	}
}
