#version 460 core

// 0 is replaced at runtime with an actual value
#define particlesCount 0

layout(local_size_x = 64) in;
layout(std430) buffer;

layout(location = 0) uniform vec2 windowSize;
layout(location = 1) uniform float forceScale;
layout(location = 2) uniform float velocityDamping;
layout(location = 3) uniform float minDistanceToAttractor;
layout(location = 4) uniform float deltaTime;
layout(location = 5) uniform bool isPaused;
layout(location = 6) uniform float particleSize;
layout(location = 7) uniform uint cellSize;

layout(binding = 0) buffer SSBO
{
	vec4 particleData[];
};
layout(binding = 1) buffer cells1
{
	uint cellIds1[];
};
layout(binding = 2) buffer objects
{
	uint objectIds[];
};
layout(binding = 5) buffer cells2
{
	uint cellIds2[];
};
layout(binding = 7) buffer tetete
{
	uint test[];
};


void main()
{
	uint thid = gl_GlobalInvocationID.x;
	if (thid >= particlesCount)
		return;

	uint gridWidth = uint(windowSize.x / cellSize) + 2;
	vec2 worldPos = particleData[thid].xy;
	vec2 gridPos;
	vec2 cellPos = modf(worldPos / cellSize, gridPos);
	gridPos += 1;

	uint hCellId = uint(gridPos.x + gridPos.y * gridWidth);

	uvec3 pCellIds = uvec3(-1);
	uvec4 objectIdsAndFlags = uvec4(thid | 0x80000000, -1, -1, -1); // 0 = -2147483648

	if (cellPos.x > 0.5)
	{
		pCellIds.x = hCellId + 1;
		objectIdsAndFlags.y = thid;
		if (cellPos.y > 0.5)
		{
			pCellIds.y = hCellId + gridWidth;
			pCellIds.z = hCellId + gridWidth + 1;
			objectIdsAndFlags.z = thid;
			objectIdsAndFlags.w = thid;
		}
		else
		{
			pCellIds.y = hCellId - gridWidth;
			pCellIds.z = hCellId - gridWidth + 1;
			objectIdsAndFlags.z = thid;
			objectIdsAndFlags.w = thid;
		}
	}
	else
	{
		pCellIds.x = hCellId - 1;
		objectIdsAndFlags.y = thid;
		if (cellPos.y > 0.5)
		{
			pCellIds.y = hCellId + gridWidth;
			pCellIds.z = hCellId + gridWidth - 1;
			objectIdsAndFlags.z = thid;
			objectIdsAndFlags.w = thid;
		}
		else
		{
			pCellIds.y = hCellId - gridWidth;
			pCellIds.z = hCellId - gridWidth - 1;
			objectIdsAndFlags.z = thid;
			objectIdsAndFlags.w = thid;
		}
	}

	uint cellIndex = thid * 2;
	cellIds1[cellIndex] = pCellIds.x << 16 | hCellId;
	cellIds1[cellIndex + 1] = pCellIds.z << 16 | pCellIds.y;

	cellIds2[cellIndex] = 0;
	cellIds2[cellIndex + 1] = 0;
	test[cellIndex] = 0;
	test[cellIndex + 1] = 0;

	uint objectIndex = cellIndex * 2;
//	objectIds[objectIndex] = objectIdsAndFlags.x;
//	objectIds[objectIndex + 1] = objectIdsAndFlags.y;
//	objectIds[objectIndex + 2] = objectIdsAndFlags.z;
//	objectIds[objectIndex + 3] = objectIdsAndFlags.w;
}
