#version 460 core

// 0 is replaced at runtime with an actual value
#define particlesCount 0

layout(local_size_x = 64) in;
layout(std430) buffer;

layout(location = 0) uniform vec2 windowSize;
layout(location = 1) uniform float forceScale;
layout(location = 2) uniform float velocityDamping;
layout(location = 3) uniform float minDistanceToAttractor;
layout(location = 4) uniform float deltaTime;
layout(location = 5) uniform bool isPaused;
layout(location = 6) uniform float particleSize;
layout(location = 7) uniform uint cellSize;

struct Particle
{
	vec2 Pos;
	vec2 Vel;
	vec2 Acc;
	float Pressure;
	float Unused;
};

layout(binding = 0) buffer SSBO
{
	Particle particles[];
};
layout(binding = 1) buffer cells1
{
	uint cellIds1[];
};
layout(binding = 2) buffer objects1
{
	uint objectIds[];
};

void main()
{
	uint thid = gl_GlobalInvocationID.x;
	if (thid >= particlesCount)
		return;

	uint gridWidth = uint(windowSize.x / cellSize) + 2;
	vec2 gridPos;
	vec2 cellPos = modf(particles[thid].Pos / cellSize, gridPos);
	gridPos += 1;

	uint hCellId = uint(gridPos.x + gridPos.y * gridWidth);

	cellIds1[thid] = hCellId;
	// neighbours
	cellIds1[thid + particlesCount] = hCellId - 1; // left
	cellIds1[thid + particlesCount * 2] = hCellId + gridWidth - 1; // bottom left
	cellIds1[thid + particlesCount * 3] = hCellId + gridWidth; // bottom
//	cellIds1[thid + particlesCount * 4] = hCellId + gridWidth + 1; // bottom right

	objectIds[thid] = thid | 0x80000000; // 0 = 2147483648
	objectIds[thid + particlesCount] = thid;
	objectIds[thid + particlesCount * 2] = thid;
	objectIds[thid + particlesCount * 3] = thid;
//	objectIds[thid + particlesCount * 4] = thid;
}
