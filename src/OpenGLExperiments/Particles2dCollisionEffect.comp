#version 460 core

// 0 is replaced at runtime with an actual value
#define particlesCount 0

layout(local_size_x = 64) in;

layout(location = 0) uniform vec2 windowSize;
layout(location = 1) uniform float forceScale;
layout(location = 2) uniform float velocityDamping;
layout(location = 3) uniform float minDistanceToAttractor;
layout(location = 4) uniform float deltaTime;
layout(location = 5) uniform bool isPaused;
layout(location = 6) uniform float particleSize;

layout(std430, binding = 0) buffer SSBO
{
	vec4 particleData[];
};

vec2 bodyToBodyAcceleration(vec2 b1, vec2 b2)
{
	vec2 dir = b2 - b1;
	
	float distSquared = max(dot(dir, dir), minDistanceToAttractor);
	float distSixth = distSquared * distSquared * distSquared;
	float invDistCube = 1.0f / sqrt(distSixth) * forceScale;

	return dir * invDistCube;
}

void nBodyGravityAcceleration(uint thid, vec2 pos)
{
	vec2 acc = vec2(0.0);
	for (int i = 0; i <= particlesCount; i += 4)
	{
		acc += bodyToBodyAcceleration(pos, particleData[i].xy);
		acc += bodyToBodyAcceleration(pos, particleData[i+1].xy);
		acc += bodyToBodyAcceleration(pos, particleData[i+2].xy);
		acc += bodyToBodyAcceleration(pos, particleData[i+3].xy);
	}
	
	particleData[thid + particlesCount].yz += acc;
}

vec2 collisionResponse(float x, vec2 norm, vec2 vel)
{
	const float k = 0.5;
	const float b = 0.05;

	float acc = k * x - b * dot(vel, norm);

	return norm * acc;
}

vec2 screenBoundsCollision(vec2 pos, vec2 vel)
{
	vec2 acc = vec2(0.0);

	const float halfParticleSize = particleSize / 2;
	const float leftWall = halfParticleSize;
	const float rightWall = windowSize.x - halfParticleSize;
	const float topWall = halfParticleSize;
	const float bottomWall = windowSize.y - halfParticleSize;

	if (pos.x < leftWall)
	{
		acc += collisionResponse(leftWall - pos.x, vec2(1.0, 0.0), vel);
	}
	if (pos.y < topWall)
	{
		acc += collisionResponse(topWall - pos.y, vec2(0.0, 1.0), vel);
	}
	if (pos.x > rightWall)
	{
		acc += collisionResponse(pos.x - rightWall, vec2(-1.0, 0.0), vel);
	}
	if (pos.y > bottomWall)
	{
		acc += collisionResponse(pos.y - bottomWall, vec2(0.0, -1.0), vel);
	}

	return acc;
}

vec3 ballToBallCollision(uint i, vec2 pos1, vec2 vel1)
{
	vec2 pos2 = particleData[i].xy;
	vec2 vel2 = particleData[i].zw;

	vec3 accPressure = vec3(0.0);

	const vec2 posDiff = pos1 - pos2;
	const float distSquared = dot(posDiff, posDiff);
	
	if (distSquared < (particleSize * particleSize))
	{
		const float dist = sqrt(distSquared);
		const vec2 norm = posDiff / dist;
		const float covered = particleSize - dist;

		accPressure.xy = collisionResponse(covered, norm, vel1 - vel2);
		accPressure.z = length(accPressure.xy);
	}

	if (accPressure.z > 0.0)
	{
		particleData[i + particlesCount].x += accPressure.z;
		particleData[i + particlesCount].yz += -accPressure.xy;
	}

	return accPressure;
}

void collisionAcceleration(uint thid, vec2 pos, vec2 vel)
{
	vec2 acc = vec2(0.0);
	float pressure = 0.0;

	for (uint i = thid + 1; i <= particlesCount; i += 1)
	{
		vec3 accPressure = ballToBallCollision(i, pos, vel);
		acc += accPressure.xy;
		pressure += accPressure.z;

//		accPressure = ballToBallCollision(i+1, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
//
//		accPressure = ballToBallCollision(i+2, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
//
//		accPressure = ballToBallCollision(i+3, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
//
//		accPressure = ballToBallCollision(i+4, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
//
//		accPressure = ballToBallCollision(i+5, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
//
//		accPressure = ballToBallCollision(i+6, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
//
//		accPressure = ballToBallCollision(i+7, pos, vel);
//		acc += accPressure.xy;
//		pressure += accPressure.z;
	}

	particleData[thid + particlesCount].x += pressure;
	particleData[thid + particlesCount].yz += acc + screenBoundsCollision(pos, vel);;
}

void main()
{
	uint thid = gl_GlobalInvocationID.x;
	if (thid >= particlesCount)
	{
		return;
	}

	float deltaT = deltaTime * 0.04;

	vec4 p = particleData[thid];
	vec2 pos = p.xy;
	vec2 vel = p.zw;

	if (!isPaused)
	{
		particleData[thid + particlesCount].x = 0;

		nBodyGravityAcceleration(thid, pos);
		collisionAcceleration(thid, pos, vel);
		
		particleData[thid + particlesCount].yz += vec2(0.0, 0.0); // gravity
	}

	// teleportation at screen bounds
//	pos = mod(mod(pos, windowSize) + vec2(windowSize), vec2(windowSize));
}
