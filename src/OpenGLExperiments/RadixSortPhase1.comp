#version 460 core

#define cellIdsLength 0
#define threadsInWorkGroup 1
#define threadsInThreadGroup 0
#define threadGroupsInWorkGroup 1
#define elementsPerGroup 0
#define sharedCountersLength 12032

#define cellIdShift 0

#define bindingCellIds1 1
#define bindingCellIds2 5
#define cellsFirst cells1
#define cellsSecond cells2

layout(local_size_x = threadsInWorkGroup) in;
layout(std430) buffer;


layout(binding = bindingCellIds1) buffer cellsFirst
{
	uint cellIds1[];
};
layout(binding = 3) buffer counters
{
	uint globalCounters[];
};
layout(binding = bindingCellIds2) buffer cellsSecond
{
	uint cellIds2[];
};

layout(binding = 9) buffer tetete
{
	float test[];
};

shared uint sharedCounters[sharedCountersLength];


void main()
{
	for (uint i = 0; gl_LocalInvocationID.x + i < sharedCountersLength; i += threadsInWorkGroup)
	{
		sharedCounters[gl_LocalInvocationID.x + i] = 0; // clearing shared memory between passes
	}
	barrier(); // TODO might be unnecessary

	const uint indexInGroup = uint(mod(gl_LocalInvocationID.x, threadsInThreadGroup));
	const uint groupIndex = gl_LocalInvocationID.x / threadsInThreadGroup;
	const uint cellIndexToReadFrom = (gl_WorkGroupID.x * threadGroupsInWorkGroup + groupIndex) * elementsPerGroup + indexInGroup;
	const uint counterIndexOffset = groupIndex * 256; // cellId (2 bytes) split in half (1 byte) and counted, 1 byte can have 256 states

	for (uint i = 0; i < elementsPerGroup && cellIndexToReadFrom + i < cellIdsLength; i += threadsInThreadGroup)
	{
		const uint cellId = cellIds1[cellIndexToReadFrom + i];
		const uint radix = (cellId >> cellIdShift) & 255; // taking only part of cellId
		const uint indexInSharedCounters = counterIndexOffset + radix;

//		barrier(); // TODO maybe remove

		if (indexInGroup == 0) {
			sharedCounters[indexInSharedCounters]++;
		}
		if (indexInGroup == 1) {
			sharedCounters[indexInSharedCounters]++;
		}
		if (indexInGroup == 2) {
			sharedCounters[indexInSharedCounters]++;
		}
		if (indexInGroup == 3) {
			sharedCounters[indexInSharedCounters]++;
		}
	}

	barrier();

	const uint globalCountersOffset = gl_WorkGroupID.x * sharedCountersLength;
	for (uint sharedMemoryCountersIndex = gl_LocalInvocationID.x; 
		sharedMemoryCountersIndex < sharedCountersLength; 
		sharedMemoryCountersIndex += threadsInWorkGroup)
	{
		globalCounters[sharedMemoryCountersIndex + globalCountersOffset] = sharedCounters[sharedMemoryCountersIndex];
	}
}
