#version 460 core

#define cellIdsLength 0
#define threadsInWorkGroup 1
#define threadsInThreadGroup 0
#define threadGroupsInWorkGroup 1
#define elementsPerGroup 0

#define cellIdShift 0

#define bindingCellIds1 1
#define bindingCellIds2 5
#define cellsFirst cells1
#define cellsSecond cells2

layout(local_size_x = threadsInWorkGroup) in;
layout(std430) buffer;


layout(binding = bindingCellIds1) buffer cellsFirst
{
	uint cellIds1[];
};
layout(binding = 3) buffer counters
{
	uint globalCounters[];
};
layout(binding = bindingCellIds2) buffer cellsSecond
{
	uint cellIds2[];
};

layout(binding = 9) buffer tetete
{
	uint test[];
};

shared uint sharedCounters[12288];// = uint[12288](0);


void main()
{
	barrier();

	const uint indexInGroup = uint(mod(gl_LocalInvocationID.x, threadsInThreadGroup));
	const uint groupIndex = gl_LocalInvocationID.x / threadsInThreadGroup;
	const uint cellIndexToReadFrom = (gl_WorkGroupID.x * threadGroupsInWorkGroup + groupIndex) * elementsPerGroup + indexInGroup;
	const uint counterIndexOffset = groupIndex * 256;

	for (uint i = 0; i < elementsPerGroup; i += threadsInThreadGroup)
	{
		const uint cellId = cellIds1[cellIndexToReadFrom + i];
		const uint radix = (cellId >> cellIdShift) & 255;
		const uint indexInSharedCounters = counterIndexOffset + radix;

		barrier();

		if (cellIndexToReadFrom + i < cellIdsLength)
		{
			if (indexInGroup == 0) {
				sharedCounters[indexInSharedCounters]++;
			}
			if (indexInGroup == 1) {
				sharedCounters[indexInSharedCounters]++;
			}
			if (indexInGroup == 2) {
				sharedCounters[indexInSharedCounters]++;
			}
			if (indexInGroup == 3) {
				sharedCounters[indexInSharedCounters]++;
			}
		}
	}

	barrier();

	const uint globalCountersOffset = gl_WorkGroupID.x * 12288;
	for (uint sharedMemoryCountersIndex = gl_LocalInvocationID.x; 
		sharedMemoryCountersIndex < 12288; 
		sharedMemoryCountersIndex += threadsInWorkGroup)
	{
		globalCounters[sharedMemoryCountersIndex + globalCountersOffset] = sharedCounters[sharedMemoryCountersIndex];
	}
}
