#version 460 core

#define cellIdsLength 0
#define radixCountersLength 1
#define threadsInWorkGroup 1
#define threadsInThreadGroup 0
#define threadGroupsInWorkGroup 1
#define elementsPerGroup 0
#define sharedCountersLength 1
#define bitMask 1

#define bindingCellIds 1
#define cells cells1

layout(local_size_x = threadsInWorkGroup) in;
layout(std430) buffer;

layout(location = 0) uniform uint cellIdShift;

layout(binding = bindingCellIds) buffer cells
{
	uint cellIds1[];
};
layout(binding = 3) buffer counters
{
	uint globalCounters[];
};

layout(binding = 9) buffer tetete
{
	float test[];
};

shared uint sharedCounters[sharedCountersLength];


void main()
{
	const uint thid = gl_LocalInvocationID.x;

	for (uint i = 0; thid + i < sharedCountersLength; i += threadsInWorkGroup)
	{
		sharedCounters[thid + i] = 0; // clearing shared memory between passes
	}

	const uint indexInGroup = uint(mod(thid, threadsInThreadGroup));
	const uint groupIndex = thid / threadsInThreadGroup;
	const uint cellIndexToReadFrom = (gl_WorkGroupID.x * threadGroupsInWorkGroup + groupIndex) * elementsPerGroup + indexInGroup;
	const uint counterIndexOffset = groupIndex * radixCountersLength;

	for (uint i = 0; i < elementsPerGroup && cellIndexToReadFrom + i < cellIdsLength; i += threadsInThreadGroup)
	{
		const uint cellId = cellIds1[cellIndexToReadFrom + i];
		const uint radix = (cellId >> cellIdShift) & bitMask; // taking only a part of cellId
		const uint indexInSharedCounters = counterIndexOffset + radix;

		for (uint g = 0; g < threadsInThreadGroup; g++)
		{
			if (indexInGroup == g) {
				sharedCounters[indexInSharedCounters]++;
			}
		}
	}

	barrier();

	const uint globalCountersOffset = gl_WorkGroupID.x * sharedCountersLength;
	for (uint sharedMemoryCountersIndex = thid; 
		sharedMemoryCountersIndex < sharedCountersLength; 
		sharedMemoryCountersIndex += threadsInWorkGroup)
	{
		globalCounters[sharedMemoryCountersIndex + globalCountersOffset] = sharedCounters[sharedMemoryCountersIndex];
	}
}
