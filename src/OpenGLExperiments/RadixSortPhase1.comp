#version 460 core

// 0 is replaced at runtime with an actual value
#define particlesCount 0
#define threadsInGroup 4
#define groupsInWorkGroup 48
#define elementsPerGroup 4

layout(local_size_x = 192) in;
layout(std430) buffer;

layout(location = 0) uniform vec2 windowSize;
layout(location = 1) uniform float forceScale;
layout(location = 2) uniform float velocityDamping;
layout(location = 3) uniform float minDistanceToAttractor;
layout(location = 4) uniform float deltaTime;
layout(location = 5) uniform bool isPaused;
layout(location = 6) uniform float particleSize;
layout(location = 7) uniform uint cellSize;

layout(binding = 0) buffer SSBO
{
	vec4 particleData[];
};
layout(binding = 1) buffer cells
{
	uint cellIds[];
};
layout(binding = 2) buffer objects
{
	uint objectIds[];
};
layout(binding = 3) buffer counters
{
	uint globalCounters[];
};

shared uint sharedCounters[12288] = uint[12288](0);


void main()
{
	const uint indexInGroup = uint(mod(gl_LocalInvocationID.x, threadsInGroup));
	const uint groupIndex = gl_LocalInvocationID.x / threadsInGroup;
	const uint cellIndexToReadFrom = (gl_WorkGroupID.x * groupsInWorkGroup + groupIndex) * elementsPerGroup + indexInGroup;

	const uint cellIdsPacked = cellIds[cellIndexToReadFrom];
	const uint cellId1 = cellIdsPacked & 65535;
	const uint cellId2 = cellIdsPacked >> 16;

	const uint counterIndexOffset = groupIndex * 256;

	uint radix = cellId1 & 255;
	uint radix2 = cellId2 & 255;

	if (indexInGroup == 0) {
		sharedCounters[counterIndexOffset + radix]++;
		sharedCounters[counterIndexOffset + radix2]++;
	}
	if (indexInGroup == 1) {
		sharedCounters[counterIndexOffset + radix]++;
		sharedCounters[counterIndexOffset + radix2]++;
	}
	if (indexInGroup == 2) {
		sharedCounters[counterIndexOffset + radix]++;
		sharedCounters[counterIndexOffset + radix2]++;
	}
	if (indexInGroup == 3) {
		sharedCounters[counterIndexOffset + radix]++;
		sharedCounters[counterIndexOffset + radix2]++;
	}

	barrier();

	uint globalCountersOffset = gl_WorkGroupID.x * 12288;
	for (uint sharedMemoryCountersIndex = gl_LocalInvocationID.x; 
		sharedMemoryCountersIndex < 12288; 
		sharedMemoryCountersIndex += 192)
	{
		globalCounters[sharedMemoryCountersIndex + globalCountersOffset] = sharedCounters[sharedMemoryCountersIndex];
	}
}
