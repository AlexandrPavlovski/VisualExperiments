#version 460 core

#define cellIdsLength 0
#define threadsInWorkGroup 1
#define threadsInThreadGroup 0
#define threadGroupsInWorkGroup 0
//#define elementsPerThread 0
#define elementsPerGroup 0

layout(local_size_x = threadsInWorkGroup) in;
layout(std430) buffer;

layout(location = 0) uniform vec2 windowSize;
layout(location = 1) uniform float forceScale;
layout(location = 2) uniform float velocityDamping;
layout(location = 3) uniform float minDistanceToAttractor;
layout(location = 4) uniform float deltaTime;
layout(location = 5) uniform bool isPaused;
layout(location = 6) uniform float particleSize;
layout(location = 7) uniform uint cellSize;

layout(binding = 1) buffer cells
{
	uint cellIds[];
};
layout(binding = 3) buffer counters
{
	uint globalCounters[];
};

shared uint sharedCounters[12288] = uint[12288](0);


void main()
{
	const uint indexInGroup = uint(mod(gl_LocalInvocationID.x, threadsInThreadGroup));
	const uint groupIndex = gl_LocalInvocationID.x / threadsInThreadGroup;
	const uint cellIndexToReadFrom = (gl_WorkGroupID.x * threadGroupsInWorkGroup + groupIndex) * elementsPerGroup + indexInGroup;
	const uint counterIndexOffset = groupIndex * 256;

	for (uint i = 0; i < elementsPerGroup; i += threadsInThreadGroup)
	{
		const uint cellIdsPacked = cellIds[cellIndexToReadFrom + i];
		const uint cellId1 = cellIdsPacked & 65535;
		const uint cellId2 = cellIdsPacked >> 16;

		const uint radix = cellId1 & 255;
		const uint radix2 = cellId2 & 255;

		const uint indexInSharedCounters = counterIndexOffset + radix;
		const uint indexInSharedCounters2 = counterIndexOffset + radix2;

		barrier();

		if (cellIndexToReadFrom + i < cellIdsLength)
		{
			if (indexInGroup == 0) {
				sharedCounters[indexInSharedCounters]++;
				sharedCounters[indexInSharedCounters2]++;
			}
			if (indexInGroup == 1) {
				sharedCounters[indexInSharedCounters]++;
				sharedCounters[indexInSharedCounters2]++;
			}
			if (indexInGroup == 2) {
				sharedCounters[indexInSharedCounters]++;
				sharedCounters[indexInSharedCounters2]++;
			}
			if (indexInGroup == 3) {
				sharedCounters[indexInSharedCounters]++;
				sharedCounters[indexInSharedCounters2]++;
			}
		}
	}

	memoryBarrier();

	const uint globalCountersOffset = gl_WorkGroupID.x * 12288;
	for (uint sharedMemoryCountersIndex = gl_LocalInvocationID.x; 
		sharedMemoryCountersIndex < 12288; 
		sharedMemoryCountersIndex += threadsInWorkGroup)
	{
		globalCounters[sharedMemoryCountersIndex + globalCountersOffset] = sharedCounters[sharedMemoryCountersIndex];
	}
}
