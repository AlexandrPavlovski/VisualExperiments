#version 460 core

#define U_fieldInputBunding 0
#define V_fieldInputBunding 1
#define U_fieldOutputBunding 2
#define V_fieldOutputBunding 3


layout(local_size_x = 32, local_size_y = 32) in;
layout(std430) buffer;


layout(location = 0) uniform ivec2 simulationArea;

layout(binding = U_fieldInputBunding, r32f) uniform image2D U_fieldInput;
layout(binding = V_fieldInputBunding, r32f) uniform image2D V_fieldInput;
layout(binding = U_fieldOutputBunding, r32f) uniform image2D U_fieldOutput;
layout(binding = V_fieldOutputBunding, r32f) uniform image2D V_fieldOutput;
layout(binding = 4) buffer cellTypeData
{
	uint cellType[];
};

layout(binding = 9) buffer tetete
{
	float test[];
};

float averageU(ivec2 cellCoord)
{
	ivec2 leftCellCoord =   ivec2(cellCoord.x - 1, cellCoord.y);
	ivec2 upCellCoord =     ivec2(cellCoord.x,     cellCoord.y + 1);
	ivec2 upLeftCellCoord = ivec2(cellCoord.x - 1, cellCoord.y + 1);

	return (imageLoad(U_fieldInput, cellCoord).x
		  + imageLoad(U_fieldInput, leftCellCoord).x
		  + imageLoad(U_fieldInput, upCellCoord).x
		  + imageLoad(U_fieldInput, upLeftCellCoord).x) * 0.25;
}

float averageV(ivec2 cellCoord)
{
	ivec2 righCellCoord =      ivec2(cellCoord.x + 1, cellCoord.y);
	ivec2 downCellCoord =      ivec2(cellCoord.x,     cellCoord.y - 1);
	ivec2 downRightCellCoord = ivec2(cellCoord.x + 1, cellCoord.y - 1);

	return (imageLoad(V_fieldInput, cellCoord).x
		  + imageLoad(V_fieldInput, righCellCoord).x
		  + imageLoad(V_fieldInput, downCellCoord).x
		  + imageLoad(V_fieldInput, downRightCellCoord).x) * 0.25;
}

float sampleField(bool isUField, vec2 sampleCoord) // bilinear interpolation
{
	ivec2 fieldCoord0 = ivec2(min(sampleCoord, simulationArea));
	ivec2 fieldCoord1 = ivec2(min(fieldCoord0 + 1, simulationArea));

	vec2 weights0 = fract(sampleCoord);
	vec2 weights1 = 1.0 - weights0;

	if (isUField)
	{
		return weights1.x * weights1.y * imageLoad(U_fieldInput, fieldCoord0).x
			 + weights0.x * weights1.y * imageLoad(U_fieldInput, ivec2(fieldCoord1.x, fieldCoord0.y)).x
			 + weights0.x * weights0.y * imageLoad(U_fieldInput, fieldCoord1).x
			 + weights1.x * weights0.y * imageLoad(U_fieldInput, ivec2(fieldCoord0.x, fieldCoord1.y)).x;
	}
	else
	{
		return weights1.x * weights1.y * imageLoad(V_fieldInput, fieldCoord0).x
			 + weights0.x * weights1.y * imageLoad(V_fieldInput, ivec2(fieldCoord1.x, fieldCoord0.y)).x
			 + weights0.x * weights0.y * imageLoad(V_fieldInput, fieldCoord1).x
			 + weights1.x * weights0.y * imageLoad(V_fieldInput, ivec2(fieldCoord0.x, fieldCoord1.y)).x;
	}
}

void main()
{
	ivec2 firstCellCoord = ivec2(gl_GlobalInvocationID.xy * 2 + 2);
//	if (firstCellCoord.x >= simulationArea.x - 1 || firstCellCoord.y >= simulationArea.y - 1)
//	{
//		return;
//	}

	for (int i = -1; i <= 0; i++)
	for (int j = -1; j <= 0; j++)
	{
		ivec2 cellCoord = firstCellCoord + ivec2(i, j);
		uint cellIndex = cellCoord.x + cellCoord.y * simulationArea.x;

		uint currCellType = cellType[cellIndex];
		if (currCellType != 0 && cellType[cellIndex - 1] != 0)
		{
			vec2 totalVelocity = vec2(imageLoad(U_fieldInput, cellCoord).x, averageV(cellCoord));
			vec2 sampleCoord = cellCoord - totalVelocity;
			sampleCoord.y += 0.5;

			float newU = sampleField(true, sampleCoord);
			imageStore(U_fieldOutput, cellCoord, vec4(newU));
		}

		if (currCellType != 0 && cellType[cellIndex - simulationArea.x] != 0)
		{
			vec2 totalVelocity = vec2(averageU(cellCoord), imageLoad(V_fieldInput, cellCoord).x);
			vec2 sampleCoord = cellCoord - totalVelocity;
			sampleCoord.x += 0.5;

			float newV = sampleField(false, sampleCoord);
			imageStore(V_fieldOutput, cellCoord, vec4(newV));
		}
//float u = imageLoad(U_fieldInput, ivec2(cellCoord)).x;
//float v = imageLoad(V_fieldInput, ivec2(cellCoord)).x;
//imageStore(U_fieldOutput, ivec2(cellCoord), vec4(u));
//imageStore(V_fieldOutput, ivec2(cellCoord), vec4(v));
	}
if (firstCellCoord.y == 170 && firstCellCoord.x == 170){
	imageStore(V_fieldOutput, ivec2(firstCellCoord), vec4(1000.0));
//	imageStore(U_fieldOutput, ivec2(firstCellCoord), vec4(100.0));
}
}
